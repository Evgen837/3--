# -*- coding: utf-8 -*-

# По номеру месяца вывести кол-во дней в нем (без указания названия месяца, в феврале 28 дней)
# Результат проверки вывести на консоль
# Если номер месяца некорректен - сообщить об этом
# Номер месяца получать от пользователя следующим образом

# user_input = input('введите номер месяца: ')
# month = int(user_input)
# if month in (1, 3, 5, 7, 8, 10, 12):
#     print('количество дней в этом месяце 31')
# elif month in (4, 6, 9, 11):
#     print('количество дней в этом месяце 31')
# elif month == 2:
#     print('количество дней в этом месяце 28')
# else:
#     print('Введен некорректный номер месяца. Должно быть число от 1 до 12')



# Заданы размеры envelop_x, envelop_y - размеры конверта и paper_x, paper_y листа бумаги (все размеры
# могут быть в диапазоне от 1 до 1000)
# Определить, поместится ли бумага в конверте (стороны листа параллельны сторонам конверта)
# Результат проверки вывести на консоль (ДА/НЕТ)
# Использовать только операторы if/elif/else, можно вложенные

# envelop_x, envelop_y = 10, 7
# paper_x, paper_y = 8, 9
#
# if paper_x <=envelop_x and paper_y <= envelop_y:
#     print('ДА')
# elif paper_x <= envelop_y and paper_y <= envelop_x:
#     print('ДА')
# else: print('НЕТ')



# даны целые числа a и b (a > b)
# Определить результат целочисленного деления a на b,
# не использую стандартную операцию целочисленного деления

# a, b = 179, 37
# remain = a
# counter = 0
# while remain >= b:
#     remain -= b
#     counter +=1
# print('результат целочисленного деления a на b составляет', counter)




# Ежемесячная стипендия студента составляет educational_grant руб., а расходы на проживание превышают стипендию
# и составляют expenses руб. в месяц. Рост цен ежемесячно увеличивает расходы на 3%, кроме первого месяца
# Составьте программу расчета суммы денег, которую необходимо единовременно попросить у родителей,
# чтобы можно было прожить учебный год (10 месяцев), используя только эти деньги и стипендию.
# Формат вывода:
#   Студенту надо попросить ХХХ.ХХ рублей


# educational_grant, expenses = 10000, 12000
#
# loan = 0
# income = 0
# total_expenses = 0
# month = 1
# cash_deficit = 0
# while month <= 10:
#     print('-'*10, 'месяц', month)
#     income += educational_grant
#     print('доход в этом месяце', educational_grant, 'всего доходов', income)
#     if month > 1:
#         expenses *= 1.03
#     total_expenses += expenses
#     print('траты в этом месяце', expenses, 'всего трат', total_expenses)
#     cash_deficit += expenses - educational_grant
#     print('не хватило в этом месяце', expenses - educational_grant, 'всего не хватило', cash_deficit)
#     month += 1
# print('-' * 20)
# print('Попросить у родителей', round(total_expenses - income, 2))



# # Есть словарь кодов товаров
# goods = {
#     'Лампа': '12345',
#     'Стол': '23456',
#     'Диван': '34567',
#     'Стул': '45678',
# }
#
# # Есть словарь списков количества товаров на складе.
# store = {
#     '12345': [
#         {'quantity': 27, 'price': 42},
#     ],
#     '23456': [
#         {'quantity': 22, 'price': 510},
#         {'quantity': 32, 'price': 520},
#     ],
#     '34567': [
#         {'quantity': 2, 'price': 1200},
#         {'quantity': 1, 'price': 1150},
#     ],
#     '45678': [
#         {'quantity': 50, 'price': 100},
#         {'quantity': 12, 'price': 95},
#         {'quantity': 43, 'price': 97},
#     ],
# }
#
# # Рассчитать на какую сумму лежит каждого товара на складе
# for title, code in goods.items():
#     total_qty = 0
#     total_price = 0
#     for goods in store[code]:
#         total_qty += goods['quantity']
#         total_price += goods['price'] * goods['quantity']
#     print('товар', title, 'на складе', total_qty, 'штук на сумму', total_price)



# # Создать функцию calc(a, b, operation). Описание входных параметров:
# # 1. Первое число
# # 2. Второе число
# # 3. Действие над ними:
# #    1) + Сложить
# #    2) - Вычесть
# #    3) * Умножить
# #    4) / Разделить
# #    5) В остальных случаях функция должна возвращать "Операция не поддерживается"
#
# def calc(a, b, operation):
#     result = 'Операция не поддерживается'
#     if operation == '+':
#         result = a + b
#     elif operation == '-':
#         result = a - b
#     elif operation == '*':
#         result = a * b
#     elif operation == '/':
#         # Проверка деления на ноль
#         if b != 0:
#             result = a / b
#         else:
#             result = 'Деление на 0!'
#     # Возвращаем результат выполнения функции
#     return result
# if __name__ == '__main__':
#     # Проверяем корректные значения
#     print(calc(30, 15, '+'))
#     print(calc(30, 15, '-'))
#     print(calc(30, 15, '*'))
#     print(calc(30, 15, '/'))
#     # Проверяем проверку деления на ноль
#     print(calc(30, 0, '/'))
#     # Проверяем неподдерживаемую операцию
#     print(calc(30, 15, '%'))



# # Напишите программу, которая будет выводить нечетные числа из списка и остановится, если встретит число 139
# #  Функция, которая проверяет входной параметр на четность
# def even(num):
#     # Возвращаем True, если остаток от деления на 2 равен нулю
#     return num % 2 == 0
# if __name__ == '__main__':
#     lst = [1, 34, 78, 345, 111, 8, 5, 34, 9, 3, 139, 56, 2, 67, 69, 90]
#     # В цикле перебираем элементы вышесозданного списка
#     for item in lst:
#         # Если текущий элемент равен 139, то прерываем цикл
#         if item == 139:
#             break
#         # Выводим элемент, если он не является четным
#         if not even(item):
#             print(item)



# # Создайте список [ 18, 14, 10, 6, 2 ]  с помощью функции range()
# lst = []
# for item in range(18, 1, -4):
#     lst.append(item)
# print(lst)



# # Дан список lst = [11, 5, 8, 32, 15, 3, 20, 132, 21, 4, 555, 9, 20].
# # Необходимо вывести элементы, которые одновременно 1) меньше 30 и 2) делятся на 3 без остатка.
# # Все остальные элементы списка необходимо просуммировать и вывести конечный результат.

# lst = [11, 5, 8, 32, 15, 3, 20, 132, 21, 4, 555, 9, 20]
# sum = 0
# for item in lst:
#     if item < 30 and item % 3 == 0:
#         print(item)
#     else: sum += item
# print(sum)



# Написать функцию month_to_season(), которая принимает 1 аргумент - номер месяца - и возвращает название сезона,
# к которому относится этот месяц.
# Например, передаем 2, на выходе получаем 'Зима'.

# def month_to_season(month):
#     season_ranges = {
#         (12, 1, 2): 'Winter',
#         (3, 4, 5): 'Spring',
#         (6, 7, 8): 'Summer',
#         (9, 10, 11): 'Autumn'
#     }
#     # Создание переменной для возвращаемого значения функции
#     season = None
#
#     for key, value in season_ranges.items():
#         if month in key:
#             season = value
#             break
#     return season
#
# print(month_to_season(1))
# print(month_to_season(5))
# print(month_to_season(8))
# print(month_to_season(9))
# print(month_to_season(12))
# print(month_to_season(999))

















